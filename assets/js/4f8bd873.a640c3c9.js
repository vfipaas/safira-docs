"use strict";(self.webpackChunkdocusaurus_safira=self.webpackChunkdocusaurus_safira||[]).push([[9238],{3905:function(e,n,a){a.d(n,{Zo:function(){return l},kt:function(){return m}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},l=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=s(a),m=r,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return a?t.createElement(f,i(i({ref:n},l),{},{components:a})):t.createElement(f,i({ref:n},l))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=a[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5290:function(e,n,a){a.r(n),a.d(n,{assets:function(){return k},contentTitle:function(){return h},default:function(){return w},frontMatter:function(){return j},metadata:function(){return b},toc:function(){return y}});var t=a(3117),r=a(102),o=(a(7294),a(3905)),i=["components"],c={toc:[{value:"<code>safira-cli project build-publish</code>",id:"safira-cli-project-build-publish",level:2}]};function p(e){var n=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"safira-cli-project-build-publish"},(0,o.kt)("inlineCode",{parentName:"h2"},"safira-cli project build-publish")),(0,o.kt)("p",null,"Build your project generating docker image."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ safira-cli project build-publish [--help] [--docker-file <value>] [-v <value>] [--skip-test yes|no]\n    [--docker-repository <value>]\n\nFLAGS\n  -v, --version=<value>        App Version\n  --docker-file=<value>        Dockerfile path\n  --docker-repository=<value>  Docker repository\n  --help                       Show CLI help.\n  --skip-test=<option>         Skip test\n                               <options: yes|no>\n\nDESCRIPTION\n  Build your project generating docker image.\n\nEXAMPLES\n  $ safira-cli project build-publish\n\n  $ safira-cli project build-publish --version 1.0.0 --skip-test true\n\n  $ safira-cli project build-publish --docker-file ./src/main/docker/Dockerfile\n")))}p.isMDXComponent=!0;var s=["components"],l={toc:[{value:"<code>safira-cli project new [PROJECT-NAME]</code>",id:"safira-cli-project-new-project-name",level:2}]};function u(e){var n=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,t.Z)({},l,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"safira-cli-project-new-project-name"},(0,o.kt)("inlineCode",{parentName:"h2"},"safira-cli project new [PROJECT-NAME]")),(0,o.kt)("p",null,"Create a new project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ safira-cli project new [PROJECT-NAME] [--help] [-l <value>] [-f springboot|quarkus] [--new-project-root\n    <value>] [-o <value>] [-i <value>] [--inso-spec-name <value>] [--project-description <value>] [--java-pack-manager\n    gradle|maven] [--java-springboot-version <value>] [--java-package <value>] [--java-version java8|java11|java17]\n    [--application-port <value>] [--kong-kubernetes yes|no] [--use-database yes|no] [--database\n    postgresql|mysql|mariadb|oracle] [--database-url <value>] [--database-user <value>] [--database-password <value>]\n    [--export-spec yes|no] [--quarkus-version <value>]\n\nARGUMENTS\n  PROJECT-NAME  Use '.' to create project into current folder or name of the project to create a new folder.User\n                lowercase letters for the project name.\n\nFLAGS\n  -f, --framework=(springboot|quarkus)\n  -i, --insomnia-workspace=<value>        Import OpenAPI file from the INSO Workspace.\n  -l, --language=java                     Programming language to use\n  -o, --openapi-file-path=<value>         The path to the OpenAPI file.\n  --application-port=8080                 Application port\n  --database=<option>                     The database provider\n                                          <options: postgresql|mysql|mariadb|oracle>\n  --database-password=password123         The password of the database\n  --database-url=localhost:5432/database  The url of the database\n  --database-user=User                    The user of the database\n  --export-spec=<option>                  Export spec\n                                          <options: yes|no>\n  --help                                  Show CLI help.\n  --inso-spec-name=<value>                The name of the INSO specification.\n  --java-pack-manager=(gradle|maven)      Java package management\n  --java-package=com.safira.demo          Java package\n  --java-springboot-version=2.5.13        Springboot version\n  --java-version=(java8|java11|java17)    Java version\n  --kong-kubernetes=<option>              Generate Kong for Kubernetes configuration\n                                          <options: yes|no>\n  --new-project-root=<value>              The path where new projects will be created, relative to the new workspace\n                                          root.\n  --project-description=<value>           The description of the new project.\n  --quarkus-version=<value>               Quarkus version\n  --use-database=<option>                 Use database\n                                          <options: yes|no>\n\nDESCRIPTION\n  Create a new project\n\nEXAMPLES\n  $ safira-cli project new\n\n  $ safira-cli project new app-name\n\n  $ safira-cli project new app-name --language java11 --java-pack-manager gradle --application-port 8090\n\n  $ safira-cli project new .  -create a project in the current folder\n")))}u.isMDXComponent=!0;var d=["components"],m={toc:[{value:"<code>safira-cli project update</code>",id:"safira-cli-project-update",level:2}]};function f(e){var n=e.components,a=(0,r.Z)(e,d);return(0,o.kt)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"safira-cli-project-update"},(0,o.kt)("inlineCode",{parentName:"h2"},"safira-cli project update")),(0,o.kt)("p",null,"describe the command here"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ safira-cli project update [-h] [-o <value>] [-i <value>] [--inso-spec-name <value>]\n\nFLAGS\n  -h, --help                        Show CLI help.\n  -i, --insomnia-workspace=<value>  Import OpenAPI file from the INSOMNIA Workspace.\n  -o, --openapi-file-path=<value>   The path to the OpenAPI file.\n  --inso-spec-name=<value>          The name of the INSO specification.\n\nDESCRIPTION\n  describe the command here\n")))}f.isMDXComponent=!0;var v=["components"],j={title:"Project"},h=void 0,b={unversionedId:"commands/project/index",id:"commands/project/index",title:"Project",description:"---",source:"@site/docs/commands/project/index.mdx",sourceDirName:"commands/project",slug:"/commands/project/",permalink:"/safira-docs/docs/commands/project/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/commands/project/index.mdx",tags:[],version:"current",frontMatter:{title:"Project"},sidebar:"tutorialSidebar",previous:{title:"commandss",permalink:"/safira-docs/docs/commands/"},next:{title:"autocomplete",permalink:"/safira-docs/docs/commands/autocomplete"}},k={},y=[],g={toc:y};function w(e){var n=e.components,a=(0,r.Z)(e,v);return(0,o.kt)("wrapper",(0,t.Z)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(u,{components:a.components,mdxType:"ProjectNew"}),(0,o.kt)("hr",null),(0,o.kt)(f,{components:a.components,mdxType:"ProjectUpdate"}),(0,o.kt)("hr",null),(0,o.kt)(p,{components:a.components,mdxType:"BuildPublish"}))}w.isMDXComponent=!0}}]);