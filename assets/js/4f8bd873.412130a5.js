"use strict";(self.webpackChunkdocusaurus_safira=self.webpackChunkdocusaurus_safira||[]).push([[9238],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(f,i(i({ref:n},l),{},{components:t})):a.createElement(f,i({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5290:function(e,n,t){t.r(n),t.d(n,{assets:function(){return k},contentTitle:function(){return h},default:function(){return w},frontMatter:function(){return j},metadata:function(){return b},toc:function(){return g}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],p={toc:[{value:"<code>safira-cli project build-publish</code>",id:"safira-cli-project-build-publish",level:2}]};function c(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"safira-cli-project-build-publish"},(0,o.kt)("inlineCode",{parentName:"h2"},"safira-cli project build-publish")),(0,o.kt)("p",null,"Build your project generating docker image."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ safira-cli project build-publish [--help] [--docker-file <value>] [-v <value>] [--skip-test yes|no]\n\nFLAGS\n  -v, --version=<value>  App Version\n  --docker-file=<value>  Dockerfile path\n  --help                 Show CLI help.\n  --skip-test=<option>   Skip test\n                         <options: yes|no>\n\nDESCRIPTION\n  Build your project generating docker image.\n\nEXAMPLES\n  $ safira-cli project build-publish\n\n  $ safira-cli project build-publish --version 1.0.0 --skip-test true\n\n  $ safira-cli project build-publish --docker-file ./src/main/docker/Dockerfile\n")))}c.isMDXComponent=!0;var s=["components"],l={toc:[{value:"<code>safira-cli project new [PROJECT-NAME]</code>",id:"safira-cli-project-new-project-name",level:2}]};function u(e){var n=e.components,t=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"safira-cli-project-new-project-name"},(0,o.kt)("inlineCode",{parentName:"h2"},"safira-cli project new [PROJECT-NAME]")),(0,o.kt)("p",null,"Create a new project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ safira-cli project new [PROJECT-NAME] [--help] [-l <value>] [-f springboot|quarkus] [--new-project-root\n    <value>] [-o <value>] [-i <value>] [--inso-spec-name <value>] [--project-description <value>] [--java-pack-manager\n    gradle|maven] [--java-springboot-version <value>] [--java-package <value>] [--java-version java8|java11|java17]\n    [--application-port <value>] [--kong-kubernetes yes|no] [--use-database yes|no] [--database\n    postgresql|mysql|mariadb|oracle] [--database-url <value>] [--database-user <value>] [--database-password <value>]\n    [--export-spec yes|no] [--quarkus-version 2.8|2.9]\n\nARGUMENTS\n  PROJECT-NAME  Use '.' to create project into current folder or name of the project to create a new folder.User\n                lowercase letters for the project name.\n\nFLAGS\n  -f, --framework=(springboot|quarkus)\n  -i, --insomnia-workspace=<value>        Import OpenAPI file from the INSO Workspace.\n  -l, --language=java                     Programming language to use\n  -o, --openapi-file-path=<value>         The path to the OpenAPI file.\n  --application-port=8080                 Application port\n  --database=<option>                     The database provider\n                                          <options: postgresql|mysql|mariadb|oracle>\n  --database-password=password123         The password of the database\n  --database-url=localhost:5432/database  The url of the database\n  --database-user=User                    The user of the database\n  --export-spec=<option>                  Export spec\n                                          <options: yes|no>\n  --help                                  Show CLI help.\n  --inso-spec-name=<value>                The name of the INSO specification.\n  --java-pack-manager=(gradle|maven)      Java package management\n  --java-package=com.safira.demo          Java package\n  --java-springboot-version=2.5.13        Springboot version\n  --java-version=(java8|java11|java17)    Java version\n  --kong-kubernetes=<option>              Generate Kong for Kubernetes configuration\n                                          <options: yes|no>\n  --new-project-root=<value>              The path where new projects will be created, relative to the new workspace\n                                          root.\n  --project-description=<value>           The description of the new project.\n  --quarkus-version=<option>              Quarkus version\n                                          <options: 2.8|2.9>\n  --use-database=<option>                 Use database\n                                          <options: yes|no>\n\nDESCRIPTION\n  Create a new project\n\nEXAMPLES\n  $ safira-cli project new\n\n  $ safira-cli project new app-name\n\n  $ safira-cli project new app-name --language java11 --java-pack-manager gradle --application-port 8090\n\n  $ safira-cli project new .  -create a project in the current folder\n")))}u.isMDXComponent=!0;var d=["components"],m={toc:[{value:"<code>safira-cli project update</code>",id:"safira-cli-project-update",level:2}]};function f(e){var n=e.components,t=(0,r.Z)(e,d);return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"safira-cli-project-update"},(0,o.kt)("inlineCode",{parentName:"h2"},"safira-cli project update")),(0,o.kt)("p",null,"describe the command here"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ safira-cli project update [-h] [-o <value>] [-i <value>] [--inso-spec-name <value>]\n\nFLAGS\n  -h, --help                        Show CLI help.\n  -i, --insomnia-workspace=<value>  Import OpenAPI file from the INSOMNIA Workspace.\n  -o, --openapi-file-path=<value>   The path to the OpenAPI file.\n  --inso-spec-name=<value>          The name of the INSO specification.\n\nDESCRIPTION\n  describe the command here\n")))}f.isMDXComponent=!0;var v=["components"],j={title:"Project"},h=void 0,b={unversionedId:"commands/project/index",id:"commands/project/index",title:"Project",description:"---",source:"@site/docs/commands/project/index.mdx",sourceDirName:"commands/project",slug:"/commands/project/",permalink:"/safira-docs/docs/commands/project/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/commands/project/index.mdx",tags:[],version:"current",frontMatter:{title:"Project"},sidebar:"tutorialSidebar",previous:{title:"commandss",permalink:"/safira-docs/docs/commands/"},next:{title:"autocomplete",permalink:"/safira-docs/docs/commands/autocomplete"}},k={},g=[],y={toc:g};function w(e){var n=e.components,t=(0,r.Z)(e,v);return(0,o.kt)("wrapper",(0,a.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(u,{components:t.components,mdxType:"ProjectNew"}),(0,o.kt)("hr",null),(0,o.kt)(f,{components:t.components,mdxType:"ProjectUpdate"}),(0,o.kt)("hr",null),(0,o.kt)(c,{components:t.components,mdxType:"BuildPublish"}))}w.isMDXComponent=!0}}]);